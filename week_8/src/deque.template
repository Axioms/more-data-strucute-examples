/**
Name: Karan Munday
Assignment Number: 8
Class Section: 04
**/
#include <cassert>
#include <cstdlib>
#include "deque.h"

template <class T>
deque<T>::deque() {
	count = 0;
	first = NULL;
	last = NULL;
}

template <class T>
deque<T>::~deque() {
	list_clear(first);
}

template <class T>
deque<T>::deque(const deque<T>& dq) {
	list_copy(dq.first, first, last);
	count = dq.count;
}

template <class T>
deque<T>& deque<T>::operator = (const deque<T>& dq) {
	if (this != &dq) {
		list_clear(first);
		list_copy(dq.first, first, last);
		count = dq.count;
	}
	return *this;
}

template <class T>
T& deque<T>::front() {
	assert(count != 0);
	return first->data();
}

template <class T>
T deque<T>::front() const {
	assert(count != 0);
	return first->data();
}

template <class T>
T& deque<T>::back() {
	assert(count != 0);
	return last->data();
}

template <class T>
T deque<T>::back() const {
	assert(count != 0);
	return last->data();
}

template <class T>
void deque<T>::push_front(const T& entry) {
	if (count != 0) {
		list_head_insert(first, entry);
	}
	else {
		first = new node<T>(entry);
		last = first;
	}
	count++;
}

template <class T>
void deque<T>::push_back(const T& entry) {
	if (count != 0) {
		list_insert(last, entry);
		last = last->link();
	}
	else {
		first = new node<T>(entry);
		last = first;
	}
	count++;
}

template <class T>
void deque<T>::pop_front() {
	if (count != 0) {
		list_head_remove(first);
		count--;
	}
}

template <class T>
void deque<T>::pop_back() {
	if (count != 0) {
		node<T>* curr = first;
		node<T>* pre_curr = first;

		while (curr->link() != NULL) {
			pre_curr = curr;
			curr = curr->link();
		}
		if (pre_curr != first) {
			list_remove(pre_curr);
			last = pre_curr;
		}
		else {
			list_head_remove(first);
			last = NULL;
		}
		count--;
	}
}

template<class T>
typename deque<T>::size_type deque<T>::size() const {
	return count;
}

template <class T>
bool deque<T>::empty() const {
	return count == 0;
}

template <class T>
bool operator == (const deque<T>& dq1, const deque<T>& dq2) {
	if (dq1.count == dq2.count) {
		node<T>* dq1_curr = dq1.first;
		node<T>* dq2_curr = dq2.first;

		while (dq1_curr != NULL) {
			if (dq1_curr->data() != dq2_curr->data()) {
				return false;
			}
			dq1_curr = dq1_curr->link();
			dq2_curr = dq2_curr->link();
		}
		return true;
	}
	else {
		return false;
	}
}

template <class T>
std::ostream& operator<<(std::ostream& out, const deque<T>& dq) {
	out << "[ ";
	node<T>* curr = dq.first;
	node<T>* pre_curr = NULL;

	while (curr != NULL) {
		pre_curr = curr;
		curr = curr->link();
		if (curr == NULL) {
			out << pre_curr->data();
		}
		else {
			out << pre_curr->data() << ", ";
		}
		
	}

	out << " ]";

	return out;
}
